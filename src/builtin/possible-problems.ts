import { type Linter } from "eslint";

export const rules: Linter.Config["rules"] = {
  "constructor-super": "error",
  "for-direction": "error",
  "getter-return": "error",
  "no-await-in-loop": "error",
  "no-compare-neg-zero": "error",
  "no-cond-assign": ["error", "always"],
  "no-console": "off",
  "no-constant-binary-expression": "error",
  "no-constant-condition": "error",
  "no-constructor-return": "error",
  "no-control-regex": "error",
  "no-debugger": "warn",
  "no-dupe-args": "error",
  "no-dupe-keys": "error",
  "no-duplicate-case": "error",
  "no-empty-character-class": "error",
  "no-empty-pattern": "error",
  "no-empty": ["warn", { allowEmptyCatch: true }],
  "no-ex-assign": "error",
  "no-extra-boolean-cast": "error",
  "no-extra-parens": [
    "error",
    "all",
    {
      nestedBinaryExpressions: false,
    },
  ],
  "no-class-assign": "error",
  "no-const-assign": "error",
  "no-dupe-class-members": "error",
  "no-duplicate-imports": "off",
  "no-extra-semi": "error",
  "no-fallthrough": "error",
  "no-func-assign": "error",
  "no-inner-declarations": ["error", "functions"],
  "no-invalid-regexp": "error",
  "no-irregular-whitespace": "error",
  "no-misleading-character-class": "error",
  "no-new-symbol": "error",
  "no-obj-calls": "error",
  "no-promise-executor-return": "error",
  "no-prototype-builtins": "error",
  "no-regex-spaces": "error",
  "no-self-assign": "error",
  "no-self-compare": "error",
  "no-sparse-arrays": "error",
  "no-template-curly-in-string": "warn",
  "no-this-before-super": "error",
  "no-undef": "error",
  "no-unexpected-multiline": "error",
  "no-unmodified-loop-condition": "error",
  "no-unreachable-loop": "error",
  "no-unreachable": "error",
  "no-unsafe-finally": "error",
  "no-unsafe-negation": "error",
  "no-unused-private-class-members": "error",
  "no-unused-vars": [
    "error",
    {
      vars: "all",
      args: "after-used",
      ignoreRestSiblings: true,
    },
  ],
  "no-use-before-define": [
    "error",
    {
      functions: true,
      classes: true,
      variables: true,
    },
  ],
  "require-atomic-updates": "error",
  "use-isnan": "error",
  "valid-typeof": [
    "error",
    {
      requireStringLiterals: true,
    },
  ],
};

export const overrides: NonNullable<Linter.Config["overrides"]> = [];
